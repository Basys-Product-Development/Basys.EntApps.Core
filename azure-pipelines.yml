# ============================
# Azure DevOps Pipeline
# Build + Pack + Publish NuGet (.nupkg) to Azure Artifacts
# ============================

trigger:
- main     # or your branch name

pool:
  vmImage: 'windows-latest'   # or 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  packageOutput: '$(Build.ArtifactStagingDirectory)/packages'
  # Set the feed name exactly as it appears in Azure Artifacts
  nugetFeed: 'Basys.EntApps.Core'
  projectPath: 'Basys.EntApps.Core.sln'

steps:
- task: UseDotNet@2
  displayName: 'Install .NET SDK'
  inputs:
    packageType: 'sdk'
    version: '8.x'    # adjust to your .NET version

- task: NuGetAuthenticate@1
  displayName: 'Authenticate to Azure Artifacts feed'
  inputs:
    nuGetServiceConnections: 'Basys.EntApps.Core'   # <-- service connection name

#- script: dotnet restore '$(projectPath)'
#  displayName: 'Restore NuGet dependencies'

# Retore Nuget Packages
- task: DotNetCoreCLI@2
  inputs:
    command: "restore"
    projects: "$(projectPath)"
    feedsToUse: "select"
    vstsFeed: "44b649ef-0194-49de-bb1c-23d1459e80ee"
  displayName: "Restore NuGet packages"

- script: dotnet build $(projectPath) --configuration $(buildConfiguration) --no-restore
  displayName: 'Build project'

- script: dotnet pack $(projectPath) --configuration $(buildConfiguration) --no-build \
          --output $(packageOutput)
  displayName: 'Create NuGet package'

- script: |
    dotnet nuget push "$(packageOutput)/*.nupkg" \
      --source "$(nugetFeed)" \
      --api-key AzureArtifacts
  displayName: 'Publish package to Azure Artifacts feed'

- task: PublishBuildArtifacts@1
  displayName: 'Save NuGet package as build artifact'
  inputs:
    pathToPublish: '$(packageOutput)'
    artifactName: 'nupkg'

- task: PublishBuildArtifacts@1
  displayName: 'Save NuGet package as build artifact'
  inputs:
    pathToPublish: '$(packageOutput)'
    artifactName: 'nupkg'
